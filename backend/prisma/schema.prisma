// schema.prisma
datasource db {
  provider = "postgresql" // Puedes ajustar el proveedor si usas otro, como MySQL o SQLite
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String     @id @default(uuid())
  username  String     @unique
  firstName String
  lastName  String
  email     String     @unique
  password  String
  role      Role       @default(USER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  lists     List[] // Relación con List
  favorites Favorite[] // Relación con Favorite
  Song      Song[]
}

model List {
  id        String     @id @default(uuid())
  title     String
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  songs     ListSong[] // Relación con ListSong

  @@unique([title, userId])
}

model Song {
  id            String     @id @default(uuid())
  title         String
  lyrics        String
  initialPhrase String
  artist        String
  categories    String[]
  status        Status     @default(PENDING)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  userId        String
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  lists         ListSong[] // Relación con ListSong
  favorites     Favorite[] // Relación con Favorite
}

model ListSong {
  id        String   @id @default(uuid())
  listId    String
  songId    String
  list      List     @relation(fields: [listId], references: [id], onDelete: Cascade)
  song      Song     @relation(fields: [songId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([listId, songId])
}

model Favorite {
  id             String   @id @default(uuid())
  userId         String
  songId         String
  trasposedSteps Int
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  song           Song     @relation(fields: [songId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())

  @@unique([songId, userId])
}

// Enum para Role
enum Role {
  USER
  ADMIN
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}
